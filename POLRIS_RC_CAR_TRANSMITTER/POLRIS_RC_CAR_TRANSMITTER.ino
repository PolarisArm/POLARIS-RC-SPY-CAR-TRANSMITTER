#include <Arduino.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <RF24.h>

#define CE         9
#define CSN       10
#define ROLL      A1
#define PITCH     A0
#define YAW       A2
#define THROTTLE  A3
#define SW1        5
#define SW2        6
#define POT1      A6
#define POT2      A7
#define TRCAL      3
#define YACAL      7
#define PICAL      4
#define ROCAL      8


#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C /// 0x3C for 128x64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT);

const unsigned char WELCOME_SCREEN [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xc0, 0x07, 0xe0, 0x18, 0x1f, 0xf8, 0x0e, 0x00, 0x38, 0x1f, 0x00, 0x7f, 0xfc, 0x00, 0x7c, 0x01, 
	0xd0, 0x03, 0x40, 0x0a, 0x1f, 0xd0, 0x06, 0x80, 0x1a, 0x1a, 0x00, 0x7f, 0xfd, 0x00, 0x28, 0x03, 
	0xc0, 0xc3, 0x03, 0x08, 0x1f, 0xc0, 0xc2, 0x06, 0x18, 0x18, 0x00, 0xff, 0xfc, 0x0c, 0x20, 0x7f, 
	0xc0, 0xc3, 0x03, 0x08, 0x1f, 0xc0, 0xc2, 0x06, 0x18, 0x18, 0x1f, 0xff, 0xfc, 0x0c, 0x20, 0x7f, 
	0xc0, 0xc3, 0x03, 0x08, 0x1f, 0xc0, 0x02, 0x00, 0x38, 0x18, 0x00, 0xff, 0xfc, 0x00, 0x60, 0x7f, 
	0xc0, 0x03, 0x03, 0x08, 0x1f, 0xc0, 0xc2, 0x00, 0x78, 0x1c, 0x00, 0x7f, 0xfc, 0x00, 0xe0, 0x7f, 
	0xc0, 0x07, 0x03, 0x08, 0x1f, 0xc0, 0xc2, 0x00, 0x38, 0x1f, 0xf8, 0x7f, 0xfc, 0x00, 0x60, 0x7f, 
	0xc0, 0x0f, 0x03, 0x08, 0x1f, 0xc0, 0xc2, 0x00, 0x18, 0x1c, 0x00, 0x7f, 0xfc, 0x00, 0x20, 0x7f, 
	0xc0, 0xff, 0x00, 0x08, 0x01, 0xc0, 0xc2, 0x04, 0x18, 0x18, 0x00, 0x7f, 0xfc, 0x08, 0x20, 0x03, 
	0xc0, 0xff, 0x80, 0x18, 0x00, 0xc0, 0xc2, 0x06, 0x18, 0x18, 0x00, 0xff, 0xfc, 0x0c, 0x30, 0x01, 
	0xe1, 0xff, 0xc0, 0x3c, 0x01, 0xe1, 0xe7, 0x0f, 0x3c, 0x3c, 0x01, 0xff, 0xfe, 0x1e, 0x78, 0x03, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x20, 0x03, 0xb3, 0x07, 0xff, 0xff, 0xff, 0xff, 0x00, 0x78, 0x0f, 0x00, 0x1f, 
	0xff, 0xfd, 0x00, 0x28, 0x01, 0xa0, 0x07, 0xff, 0xff, 0xff, 0xfa, 0x00, 0xd0, 0x07, 0x40, 0x0f, 
	0xff, 0xfc, 0x00, 0x60, 0x61, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xc0, 0xc3, 0x03, 0x0f, 
	0xff, 0xfc, 0x0f, 0xe0, 0x61, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xc0, 0xc3, 0x03, 0x0f, 
	0xff, 0xfc, 0x00, 0x60, 0x61, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xc0, 0x03, 0x00, 0x1f, 
	0xff, 0xfe, 0x00, 0x20, 0x01, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xc0, 0xc3, 0x00, 0x3f, 
	0xff, 0xff, 0xfc, 0x20, 0x03, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xc0, 0xc3, 0x00, 0x1f, 
	0xff, 0xfe, 0x00, 0x20, 0x07, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xc0, 0xc3, 0x00, 0x0f, 
	0xff, 0xfc, 0x00, 0x20, 0x7f, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0xc0, 0xc3, 0x02, 0x0f, 
	0xff, 0xfc, 0x00, 0x60, 0x7f, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x40, 0xc3, 0x03, 0x0f, 
	0xff, 0xfe, 0x00, 0xf0, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xe1, 0xe7, 0x87, 0x9f, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x81, 0xf3, 0xc0, 0x00, 0x60, 0x00, 0x7f, 0xfc, 0x03, 0xff, 0xc0, 0x07, 0xff, 0xff, 
	0xff, 0xff, 0x70, 0xe1, 0xd0, 0x00, 0x68, 0x00, 0x3c, 0x7b, 0x81, 0xff, 0xe0, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0x40, 0xe1, 0xd0, 0x00, 0x68, 0x00, 0x38, 0x3a, 0x01, 0xff, 0x40, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0x40, 0xe1, 0xc0, 0x3f, 0xe0, 0x1c, 0x3b, 0xba, 0x01, 0xff, 0x00, 0xe1, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0xe1, 0xc0, 0x3f, 0xe0, 0x1c, 0x3a, 0x3c, 0x01, 0xff, 0x00, 0xe1, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0xe1, 0xc0, 0x3f, 0xe0, 0x1c, 0x3a, 0x3e, 0x01, 0xff, 0x00, 0xe1, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0xe1, 0xc0, 0x00, 0x60, 0x00, 0x3c, 0x7e, 0x01, 0xff, 0x00, 0xe1, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0xe1, 0xc0, 0x00, 0x60, 0x00, 0x7f, 0xfe, 0x01, 0xff, 0x00, 0xe1, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0x81, 0xc0, 0x3f, 0xe0, 0x00, 0xff, 0xfe, 0x01, 0xff, 0x00, 0xe1, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0x03, 0xc0, 0x3f, 0xe0, 0x00, 0x7f, 0xfe, 0x01, 0xc7, 0x00, 0xe1, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0x07, 0xc0, 0x3f, 0xe0, 0x00, 0x3c, 0x7e, 0x01, 0xbb, 0x00, 0xe1, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0x0f, 0xc0, 0x00, 0xe0, 0x10, 0x38, 0x3e, 0x01, 0xa3, 0x00, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0x0f, 0xc0, 0x00, 0xe0, 0x10, 0x38, 0x3e, 0x01, 0xa3, 0x00, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0x1f, 0xc0, 0x00, 0x60, 0x1c, 0x38, 0x3e, 0x01, 0x83, 0x00, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x1f, 0xc0, 0x00, 0x60, 0x1c, 0x38, 0x3e, 0x01, 0xc7, 0x80, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x7f, 0xe0, 0x00, 0xf0, 0x7e, 0x78, 0x3f, 0x83, 0xff, 0xc0, 0x07, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


const unsigned char HOME [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x04, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x04, 
	0x9c, 0x88, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x04, 
	0xa2, 0x89, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x08, 0xf1, 0xb1, 0x8c, 0x84, 
	0xa0, 0xf9, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x14, 0xc9, 0x52, 0xca, 0x84, 
	0xa0, 0x89, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x22, 0xc9, 0x54, 0x69, 0x84, 
	0xa0, 0x89, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3e, 0xf1, 0x17, 0xe8, 0x84, 
	0xa2, 0x89, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x22, 0xc9, 0x14, 0x68, 0x84, 
	0x9c, 0x88, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x22, 0xc5, 0x14, 0x68, 0x84, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x04, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x04, 
	0x9c, 0x88, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0xa2, 0x88, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0xa0, 0xf8, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0xa0, 0x88, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x01, 0xc0, 0x00, 0x04, 
	0xa0, 0x88, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x01, 0xc0, 0x00, 0x04, 
	0xa2, 0x88, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xf3, 0x0d, 0xdf, 0x98, 0x64, 
	0x9c, 0x89, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xf3, 0x0d, 0xdf, 0x98, 0x64, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x03, 0x0d, 0xd8, 0x18, 0x64, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xf3, 0x6d, 0xdf, 0x9b, 0x64, 
	0x9c, 0x89, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xf3, 0x6d, 0xdf, 0x9b, 0x64, 
	0xa2, 0x8a, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x13, 0x6d, 0xc0, 0x9b, 0x64, 
	0xa0, 0xf8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xf0, 0x91, 0xdf, 0x84, 0x84, 
	0xa0, 0x88, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xf0, 0x91, 0xdf, 0x84, 0x84, 
	0xa0, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x01, 0xc0, 0x00, 0x04, 
	0xa2, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x06, 0x01, 0xc0, 0xf8, 0x04, 
	0x9c, 0x8b, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x06, 0x01, 0xc0, 0xf8, 0x04, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x06, 0x01, 0xc0, 0x04, 0x04, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x06, 0x01, 0xc0, 0x04, 0x04, 
	0x9c, 0x88, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x06, 0x01, 0xc0, 0x18, 0x04, 
	0xa2, 0x89, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x06, 0x01, 0xc0, 0x20, 0x04, 
	0xa0, 0xf8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x06, 0x01, 0xc0, 0x20, 0x04, 
	0xa0, 0x88, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x06, 0x01, 0xc0, 0xc0, 0x04, 
	0xa0, 0x88, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x06, 0x01, 0xc0, 0xfc, 0x04, 
	0xa2, 0x89, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x06, 0x01, 0xc0, 0xfc, 0x04, 
	0x9c, 0x88, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x01, 0xc0, 0x00, 0x04, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x9c, 0x88, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x04, 
	0xa2, 0x88, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x04, 
	0xa0, 0xf8, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x04, 
	0xa0, 0x89, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x7f, 0xff, 0x9f, 0xff, 0xe4, 
	0xa0, 0x89, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x7f, 0xff, 0x9f, 0xff, 0xe4, 
	0xa2, 0x88, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0x01, 0x98, 0x00, 0x64, 
	0x9c, 0x88, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0x01, 0x98, 0x00, 0x64, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0x01, 0x98, 0x00, 0x64, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0x01, 0x98, 0x00, 0x64, 
	0x9c, 0x89, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0x01, 0x98, 0x00, 0x64, 
	0xa2, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0x01, 0x98, 0x00, 0x64, 
	0xa0, 0xf9, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0x01, 0x98, 0x00, 0x64, 
	0xa0, 0x88, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0x01, 0x98, 0x00, 0x64, 
	0xa0, 0x88, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0x01, 0x98, 0x00, 0x64, 
	0xa2, 0x89, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0x01, 0x98, 0x00, 0x64, 
	0x9c, 0x88, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0x01, 0x98, 0x00, 0x64, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0x01, 0x98, 0x00, 0x64, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x7f, 0xff, 0x9f, 0xff, 0xe4, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x7f, 0xff, 0x9f, 0xff, 0xe4, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x04, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x04, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x04, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char DIGI_CLICKED [] PROGMEM = {
	0xff, 0xc0, 0xff, 0xc0, 0xff, 0xc0, 0xff, 0xc0, 0xff, 0xc0, 0xff, 0xc0, 0xff, 0xc0, 0xff, 0xc0, 
	0xff, 0xc0, 0xff, 0xc0
};

unsigned long previousCurrentTime = 0,previousTime = 0;

const uint64_t address = 0XE8E8F0F0E1LL;

RF24 radio(CE,CSN);

struct CHANNEL_DATA{
  byte throttle;
  byte yaw;
  byte roll;
  byte pitch;
  byte pot1;
  byte pot2;
  byte sw1;
  byte sw2;
};

CHANNEL_DATA data;

void send_data();
void display_data();

void setup() {
  // put your setup code here, to run once:
  pinMode(THROTTLE,INPUT);
  pinMode(YAW     ,INPUT);
  pinMode(ROLL    ,INPUT);
  pinMode(PITCH   ,INPUT);
  pinMode(POT1    ,INPUT);
  pinMode(POT2    ,INPUT);
  pinMode(SW1     ,INPUT);
  pinMode(SW2     ,INPUT);
  pinMode(TRCAL   ,INPUT);
  pinMode(YACAL   ,INPUT);
  pinMode(ROCAL   ,INPUT);
  pinMode(PICAL   ,INPUT);

  Wire.begin();
  Serial.begin(115200);
  if (!radio.begin()) {
    Serial.println(F("radio hardware is not responding!!"));
    while (1) {}  // hold in infinite loop
  }
  radio.setDataRate(RF24_250KBPS);
  radio.setPALevel(RF24_PA_MIN);
  radio.openWritingPipe(address);
  radio.stopListening();

  data.throttle = 127;
  data.yaw      = 127;
  data.roll     = 127;
  data.pitch    = 127;
  data.pot1     = 127;
  data.pot2     = 127;
  data.sw1      = 0;
  data.sw2      = 0;
  
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  display.setRotation(2);

  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  display.clearDisplay();
  delay(100); 
  display.clearDisplay();
  display.drawBitmap(0,0,WELCOME_SCREEN,128,64,SSD1306_WHITE);
  display.display();
  delay(500); 
  display.clearDisplay();
}

void loop() {
  send_data();
  display_data();  
  delayMicroseconds(100);
}

void send_data()
{
  data.throttle = map(analogRead(THROTTLE),0,1023,0,255);
  data.yaw      = map(analogRead(YAW)     ,0,1023,0,255);
  data.roll     = map(analogRead(ROLL)    ,0,1023,0,255);
  data.pitch    = map(analogRead(PITCH)   ,0,1023,0,255);
  data.pot1     = map(analogRead(POT1)    ,0,1023,0,255);  
  data.pot2     = map(analogRead(POT2)    ,0,1023,0,255);
  data.sw1      = digitalRead(SW1);
  data.sw2      = digitalRead(SW2);
  radio.write(&data,sizeof(CHANNEL_DATA));
 // Serial.println("SENT DATA");
}

void display_data()
{
    display.clearDisplay();
    display.drawBitmap(0,0,HOME,128,64,SSD1306_WHITE);

  
	if(data.sw1 == LOW)
      {
	display.drawBitmap( 92, 45,DIGI_CLICKED, 10,10,SSD1306_WHITE );   
      }
			
     if(data.sw2 == LOW)
      {
	display.drawBitmap( 110,45,DIGI_CLICKED, 10, 10, SSD1306_WHITE);
      }
			
      display.setTextSize(1); // Draw 2X-scale text
      display.setTextColor(SSD1306_WHITE);
      display.setCursor(24,4);
      display.print(data.throttle); 
      display.setCursor(24,13);
      display.print(data.yaw);
      display.setCursor(24,22);
      display.print(data.roll);
      display.setCursor(24,31);
      display.print(data.pitch);
      display.setCursor(24,40);
      display.print(data.pot1);
      display.setCursor(24,49);
      display.print(data.pot2);
      display.display();  
}


